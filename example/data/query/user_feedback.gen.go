// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/go-leo/sqlgen"
	"github.com/go-leo/sqlgen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-leo/sqlgen/example/data/entity"
)

func newUserFeedback(db *gorm.DB, opts ...sqlgen.DOOption) userFeedback {
	_userFeedback := userFeedback{}

	_userFeedback.userFeedbackDo.UseDB(db, opts...)
	_userFeedback.userFeedbackDo.UseModel(&entity.UserFeedback{})

	tableName := _userFeedback.userFeedbackDo.TableName()
	_userFeedback.ALL = field.NewAsterisk(tableName)
	_userFeedback.ID = field.NewInt64(tableName, "id")
	_userFeedback.UID = field.NewInt64(tableName, "uid")
	_userFeedback.Project = field.NewString(tableName, "project")
	_userFeedback.Appid = field.NewString(tableName, "appid")
	_userFeedback.Channel = field.NewString(tableName, "channel")
	_userFeedback.FeedBack = field.NewString(tableName, "feed_back")
	_userFeedback.ContactDetails = field.NewString(tableName, "contact_details")
	_userFeedback.AppVersion = field.NewString(tableName, "app_version")
	_userFeedback.PhoneModel = field.NewString(tableName, "phone_model")
	_userFeedback.PhoneOs = field.NewString(tableName, "phone_os")
	_userFeedback.Status = field.NewInt8(tableName, "status")
	_userFeedback.ReplyStatus = field.NewInt8(tableName, "reply_status")
	_userFeedback.LastAdminID = field.NewInt64(tableName, "last_admin_id")
	_userFeedback.Remark = field.NewString(tableName, "remark")
	_userFeedback.FrameworkVersion = field.NewString(tableName, "framework_version")
	_userFeedback.Resolution = field.NewString(tableName, "resolution")
	_userFeedback.LastMessageID = field.NewInt64(tableName, "last_message_id")
	_userFeedback.LastFeedbackTime = field.NewTime(tableName, "last_feedback_time")
	_userFeedback.FirstReplyTime = field.NewTime(tableName, "first_reply_time")
	_userFeedback.LastReplyTime = field.NewTime(tableName, "last_reply_time")
	_userFeedback.CreateTime = field.NewTime(tableName, "create_time")
	_userFeedback.UpdateTime = field.NewTime(tableName, "update_time")

	_userFeedback.fillFieldMap()

	return _userFeedback
}

type userFeedback struct {
	userFeedbackDo userFeedbackDo

	ALL              field.Asterisk
	ID               field.Int64
	UID              field.Int64
	Project          field.String
	Appid            field.String // appid
	Channel          field.String // 渠道
	FeedBack         field.String
	ContactDetails   field.String
	AppVersion       field.String // 应用版本
	PhoneModel       field.String // 手机型号
	PhoneOs          field.String // 手机操作系统
	Status           field.Int8   // 处理状态：0 未处理；1 跟进中；2 已处理；3 无需处理
	ReplyStatus      field.Int8   // 回复状态：0 未回复；1 已回复
	LastAdminID      field.Int64  // 最近处理人ID
	Remark           field.String // 处理备注
	FrameworkVersion field.String // 快应用-框架版本、公众号-微信版本
	Resolution       field.String // 分辨率
	LastMessageID    field.Int64  // 最后的消息id
	LastFeedbackTime field.Time   // 用户最后反馈的时间
	FirstReplyTime   field.Time   // 首次回复时间
	LastReplyTime    field.Time   // 最近回复时间
	CreateTime       field.Time
	UpdateTime       field.Time

	fieldMap map[string]field.Expr
}

func (u userFeedback) Table(newTableName string) *userFeedback {
	u.userFeedbackDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFeedback) As(alias string) *userFeedback {
	u.userFeedbackDo.DO = *(u.userFeedbackDo.As(alias).(*sqlgen.DO))
	return u.updateTableName(alias)
}

func (u *userFeedback) updateTableName(table string) *userFeedback {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Project = field.NewString(table, "project")
	u.Appid = field.NewString(table, "appid")
	u.Channel = field.NewString(table, "channel")
	u.FeedBack = field.NewString(table, "feed_back")
	u.ContactDetails = field.NewString(table, "contact_details")
	u.AppVersion = field.NewString(table, "app_version")
	u.PhoneModel = field.NewString(table, "phone_model")
	u.PhoneOs = field.NewString(table, "phone_os")
	u.Status = field.NewInt8(table, "status")
	u.ReplyStatus = field.NewInt8(table, "reply_status")
	u.LastAdminID = field.NewInt64(table, "last_admin_id")
	u.Remark = field.NewString(table, "remark")
	u.FrameworkVersion = field.NewString(table, "framework_version")
	u.Resolution = field.NewString(table, "resolution")
	u.LastMessageID = field.NewInt64(table, "last_message_id")
	u.LastFeedbackTime = field.NewTime(table, "last_feedback_time")
	u.FirstReplyTime = field.NewTime(table, "first_reply_time")
	u.LastReplyTime = field.NewTime(table, "last_reply_time")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")

	u.fillFieldMap()

	return u
}

func (u *userFeedback) WithContext(ctx context.Context) *userFeedbackDo {
	return u.userFeedbackDo.WithContext(ctx)
}

func (u userFeedback) TableName() string { return u.userFeedbackDo.TableName() }

func (u userFeedback) Alias() string { return u.userFeedbackDo.Alias() }

func (u *userFeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFeedback) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 22)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["project"] = u.Project
	u.fieldMap["appid"] = u.Appid
	u.fieldMap["channel"] = u.Channel
	u.fieldMap["feed_back"] = u.FeedBack
	u.fieldMap["contact_details"] = u.ContactDetails
	u.fieldMap["app_version"] = u.AppVersion
	u.fieldMap["phone_model"] = u.PhoneModel
	u.fieldMap["phone_os"] = u.PhoneOs
	u.fieldMap["status"] = u.Status
	u.fieldMap["reply_status"] = u.ReplyStatus
	u.fieldMap["last_admin_id"] = u.LastAdminID
	u.fieldMap["remark"] = u.Remark
	u.fieldMap["framework_version"] = u.FrameworkVersion
	u.fieldMap["resolution"] = u.Resolution
	u.fieldMap["last_message_id"] = u.LastMessageID
	u.fieldMap["last_feedback_time"] = u.LastFeedbackTime
	u.fieldMap["first_reply_time"] = u.FirstReplyTime
	u.fieldMap["last_reply_time"] = u.LastReplyTime
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
}

func (u userFeedback) clone(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFeedback) replaceDB(db *gorm.DB) userFeedback {
	u.userFeedbackDo.ReplaceDB(db)
	return u
}

type userFeedbackDo struct{ sqlgen.DO }

func (u userFeedbackDo) Debug() *userFeedbackDo {
	return u.withDO(u.DO.Debug())
}

func (u userFeedbackDo) WithContext(ctx context.Context) *userFeedbackDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFeedbackDo) ReadDB() *userFeedbackDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFeedbackDo) WriteDB() *userFeedbackDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFeedbackDo) Session(config *gorm.Session) *userFeedbackDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFeedbackDo) Clauses(conds ...clause.Expression) *userFeedbackDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFeedbackDo) Returning(value interface{}, columns ...string) *userFeedbackDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFeedbackDo) Not(conds ...sqlgen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFeedbackDo) Or(conds ...sqlgen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFeedbackDo) Select(conds ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFeedbackDo) Where(conds ...sqlgen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFeedbackDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userFeedbackDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userFeedbackDo) Order(conds ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFeedbackDo) Distinct(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFeedbackDo) Omit(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFeedbackDo) Join(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFeedbackDo) Group(cols ...field.Expr) *userFeedbackDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFeedbackDo) Having(conds ...sqlgen.Condition) *userFeedbackDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFeedbackDo) Limit(limit int) *userFeedbackDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFeedbackDo) Offset(offset int) *userFeedbackDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFeedbackDo) Scopes(funcs ...func(sqlgen.Dao) sqlgen.Dao) *userFeedbackDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFeedbackDo) Unscoped() *userFeedbackDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFeedbackDo) Create(values ...*entity.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFeedbackDo) CreateInBatches(values []*entity.UserFeedback, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFeedbackDo) Save(values ...*entity.UserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFeedbackDo) First() (*entity.UserFeedback, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserFeedback), nil
	}
}

func (u userFeedbackDo) Take() (*entity.UserFeedback, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserFeedback), nil
	}
}

func (u userFeedbackDo) Last() (*entity.UserFeedback, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserFeedback), nil
	}
}

func (u userFeedbackDo) Find() ([]*entity.UserFeedback, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserFeedback), err
}

func (u userFeedbackDo) FindInBatch(batchSize int, fc func(tx sqlgen.Dao, batch int) error) (results []*entity.UserFeedback, err error) {
	buf := make([]*entity.UserFeedback, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx sqlgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFeedbackDo) FindInBatches(result *[]*entity.UserFeedback, batchSize int, fc func(tx sqlgen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFeedbackDo) Attrs(attrs ...field.AssignExpr) *userFeedbackDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFeedbackDo) Assign(attrs ...field.AssignExpr) *userFeedbackDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFeedbackDo) Joins(fields ...field.RelationField) *userFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFeedbackDo) Preload(fields ...field.RelationField) *userFeedbackDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFeedbackDo) FirstOrInit() (*entity.UserFeedback, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserFeedback), nil
	}
}

func (u userFeedbackDo) FirstOrCreate() (*entity.UserFeedback, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserFeedback), nil
	}
}

func (u userFeedbackDo) FindByPage(offset int, limit int) (result []*entity.UserFeedback, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFeedbackDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFeedbackDo) Delete(models ...*entity.UserFeedback) (result sqlgen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFeedbackDo) withDO(do sqlgen.Dao) *userFeedbackDo {
	u.DO = *do.(*sqlgen.DO)
	return u
}
