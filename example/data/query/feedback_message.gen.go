// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/go-leo/sqlgen"
	"github.com/go-leo/sqlgen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-leo/sqlgen/example/data/entity"
)

func newFeedbackMessage(db *gorm.DB, opts ...sqlgen.DOOption) feedbackMessage {
	_feedbackMessage := feedbackMessage{}

	_feedbackMessage.feedbackMessageDo.UseDB(db, opts...)
	_feedbackMessage.feedbackMessageDo.UseModel(&entity.FeedbackMessage{})

	tableName := _feedbackMessage.feedbackMessageDo.TableName()
	_feedbackMessage.ALL = field.NewAsterisk(tableName)
	_feedbackMessage.ID = field.NewInt64(tableName, "id")
	_feedbackMessage.FeedbackID = field.NewInt64(tableName, "feedback_id")
	_feedbackMessage.FromUserID = field.NewInt64(tableName, "from_user_id")
	_feedbackMessage.FromUserName = field.NewString(tableName, "from_user_name")
	_feedbackMessage.ToUserID = field.NewInt64(tableName, "to_user_id")
	_feedbackMessage.ToUserName = field.NewString(tableName, "to_user_name")
	_feedbackMessage.Content = field.NewString(tableName, "content")
	_feedbackMessage.Media = field.NewString(tableName, "media")
	_feedbackMessage.HasRead = field.NewInt8(tableName, "has_read")
	_feedbackMessage.CreateTime = field.NewTime(tableName, "create_time")
	_feedbackMessage.UpdateTime = field.NewTime(tableName, "update_time")

	_feedbackMessage.fillFieldMap()

	return _feedbackMessage
}

type feedbackMessage struct {
	feedbackMessageDo feedbackMessageDo

	ALL          field.Asterisk
	ID           field.Int64
	FeedbackID   field.Int64  // 反馈记录ID
	FromUserID   field.Int64  // 发送者ID
	FromUserName field.String // 发送者
	ToUserID     field.Int64  // 接收者ID
	ToUserName   field.String // 接收者
	Content      field.String // 消息文本内容
	Media        field.String // 消息多媒体内容
	HasRead      field.Int8   // 是否已读
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (f feedbackMessage) Table(newTableName string) *feedbackMessage {
	f.feedbackMessageDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f feedbackMessage) As(alias string) *feedbackMessage {
	f.feedbackMessageDo.DO = *(f.feedbackMessageDo.As(alias).(*sqlgen.DO))
	return f.updateTableName(alias)
}

func (f *feedbackMessage) updateTableName(table string) *feedbackMessage {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.FeedbackID = field.NewInt64(table, "feedback_id")
	f.FromUserID = field.NewInt64(table, "from_user_id")
	f.FromUserName = field.NewString(table, "from_user_name")
	f.ToUserID = field.NewInt64(table, "to_user_id")
	f.ToUserName = field.NewString(table, "to_user_name")
	f.Content = field.NewString(table, "content")
	f.Media = field.NewString(table, "media")
	f.HasRead = field.NewInt8(table, "has_read")
	f.CreateTime = field.NewTime(table, "create_time")
	f.UpdateTime = field.NewTime(table, "update_time")

	f.fillFieldMap()

	return f
}

func (f *feedbackMessage) WithContext(ctx context.Context) *feedbackMessageDo {
	return f.feedbackMessageDo.WithContext(ctx)
}

func (f feedbackMessage) TableName() string { return f.feedbackMessageDo.TableName() }

func (f feedbackMessage) Alias() string { return f.feedbackMessageDo.Alias() }

func (f *feedbackMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *feedbackMessage) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["feedback_id"] = f.FeedbackID
	f.fieldMap["from_user_id"] = f.FromUserID
	f.fieldMap["from_user_name"] = f.FromUserName
	f.fieldMap["to_user_id"] = f.ToUserID
	f.fieldMap["to_user_name"] = f.ToUserName
	f.fieldMap["content"] = f.Content
	f.fieldMap["media"] = f.Media
	f.fieldMap["has_read"] = f.HasRead
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["update_time"] = f.UpdateTime
}

func (f feedbackMessage) clone(db *gorm.DB) feedbackMessage {
	f.feedbackMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f feedbackMessage) replaceDB(db *gorm.DB) feedbackMessage {
	f.feedbackMessageDo.ReplaceDB(db)
	return f
}

type feedbackMessageDo struct{ sqlgen.DO }

func (f feedbackMessageDo) Debug() *feedbackMessageDo {
	return f.withDO(f.DO.Debug())
}

func (f feedbackMessageDo) WithContext(ctx context.Context) *feedbackMessageDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedbackMessageDo) ReadDB() *feedbackMessageDo {
	return f.Clauses(dbresolver.Read)
}

func (f feedbackMessageDo) WriteDB() *feedbackMessageDo {
	return f.Clauses(dbresolver.Write)
}

func (f feedbackMessageDo) Session(config *gorm.Session) *feedbackMessageDo {
	return f.withDO(f.DO.Session(config))
}

func (f feedbackMessageDo) Clauses(conds ...clause.Expression) *feedbackMessageDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedbackMessageDo) Returning(value interface{}, columns ...string) *feedbackMessageDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f feedbackMessageDo) Not(conds ...sqlgen.Condition) *feedbackMessageDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedbackMessageDo) Or(conds ...sqlgen.Condition) *feedbackMessageDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedbackMessageDo) Select(conds ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedbackMessageDo) Where(conds ...sqlgen.Condition) *feedbackMessageDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedbackMessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *feedbackMessageDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f feedbackMessageDo) Order(conds ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedbackMessageDo) Distinct(cols ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedbackMessageDo) Omit(cols ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedbackMessageDo) Join(table schema.Tabler, on ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedbackMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedbackMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedbackMessageDo) Group(cols ...field.Expr) *feedbackMessageDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedbackMessageDo) Having(conds ...sqlgen.Condition) *feedbackMessageDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedbackMessageDo) Limit(limit int) *feedbackMessageDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedbackMessageDo) Offset(offset int) *feedbackMessageDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedbackMessageDo) Scopes(funcs ...func(sqlgen.Dao) sqlgen.Dao) *feedbackMessageDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedbackMessageDo) Unscoped() *feedbackMessageDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedbackMessageDo) Create(values ...*entity.FeedbackMessage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedbackMessageDo) CreateInBatches(values []*entity.FeedbackMessage, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedbackMessageDo) Save(values ...*entity.FeedbackMessage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedbackMessageDo) First() (*entity.FeedbackMessage, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.FeedbackMessage), nil
	}
}

func (f feedbackMessageDo) Take() (*entity.FeedbackMessage, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.FeedbackMessage), nil
	}
}

func (f feedbackMessageDo) Last() (*entity.FeedbackMessage, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.FeedbackMessage), nil
	}
}

func (f feedbackMessageDo) Find() ([]*entity.FeedbackMessage, error) {
	result, err := f.DO.Find()
	return result.([]*entity.FeedbackMessage), err
}

func (f feedbackMessageDo) FindInBatch(batchSize int, fc func(tx sqlgen.Dao, batch int) error) (results []*entity.FeedbackMessage, err error) {
	buf := make([]*entity.FeedbackMessage, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx sqlgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedbackMessageDo) FindInBatches(result *[]*entity.FeedbackMessage, batchSize int, fc func(tx sqlgen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedbackMessageDo) Attrs(attrs ...field.AssignExpr) *feedbackMessageDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedbackMessageDo) Assign(attrs ...field.AssignExpr) *feedbackMessageDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedbackMessageDo) Joins(fields ...field.RelationField) *feedbackMessageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f feedbackMessageDo) Preload(fields ...field.RelationField) *feedbackMessageDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f feedbackMessageDo) FirstOrInit() (*entity.FeedbackMessage, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.FeedbackMessage), nil
	}
}

func (f feedbackMessageDo) FirstOrCreate() (*entity.FeedbackMessage, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.FeedbackMessage), nil
	}
}

func (f feedbackMessageDo) FindByPage(offset int, limit int) (result []*entity.FeedbackMessage, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f feedbackMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f feedbackMessageDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f feedbackMessageDo) Delete(models ...*entity.FeedbackMessage) (result sqlgen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *feedbackMessageDo) withDO(do sqlgen.Dao) *feedbackMessageDo {
	f.DO = *do.(*sqlgen.DO)
	return f
}
