// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.
// Code generated by github.com/go-leo/sqlgen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"github.com/go-leo/sqlgen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...sqlgen.DOOption) *Query {
	return &Query{
		db:           db,
		newMediaBook: newNewMediaBook(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	newMediaBook newMediaBook
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db, // tx
		newMediaBook: q.newMediaBook.clone(db), // reciver.NewMediaBook 和 return *Query.NewMediaBook 使用的同一个tx
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read)) // db -> n db -> tx
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		newMediaBook: q.newMediaBook.replaceDB(db),
	}
}

type queryInstance struct {
	NewMediaBook *newMediaBook
}

func (q *Query) Instance(ctx context.Context) *queryInstance {
	tx, ok := ctx.Value(contextTxKey{}).(*gorm.DB)
    if ok {
		new := q.clone(tx)
		return &queryInstance{
			NewMediaBook: &new.newMediaBook,
		}
    }
	return &queryInstance{
		NewMediaBook: &q.newMediaBook,
	}
}

type queryDo struct {
	NewMediaBook *newMediaBookDo
}

func (q *queryInstance) WithContext(ctx context.Context) *queryDo {
	return &queryDo{
		NewMediaBook: q.NewMediaBook.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { 
		return fc(q.clone(tx)) 
	}, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

// 用来承载事务的上下文
type contextTxKey struct{}

func (q *Query) ExecTx(ctx context.Context, f func(ctx context.Context) error) error {
	return q.db.WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		ctx := context.WithValue(ctx, contextTxKey{}, tx)
		return f(ctx) 
	})
}


type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
